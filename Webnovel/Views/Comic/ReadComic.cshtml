
@using Webnovel.Repository
@model X.PagedList.IPagedList<Webnovel.Entities.Episode>
@*@model ReflectionIT.Mvc.Paging.PagingList<Webnovel.Entities.Episode>
    @using ReflectionIT.Mvc.Paging
    @addTagHelper *, ReflectionIT.Mvc.Paging*@

@inject IComic _Comic
@inject IComicComment _ComicComment
@inject UserManager<ApplicationUser> UserManager
@inject IPayment _payment
@inject IRate _Rate
@{
    ViewData["Title"] = "Read Comic";
    Layout = "~/Views/Shared/_NovelLayout.cshtml";

    //var comicScene = await _Comic.GetComicScenes(Model.Id);

    var chapterId = ViewBag.chapterId;
    var m = Model;
    int currentPage = Model.PageNumber;
    int nextPage = currentPage + 1;
    int previousPage = currentPage - 1;
    var thisPage = Model.FirstOrDefault();
    var currentUrl = Url.Action("ReadComic", new { id = thisPage.ComicId, page = currentPage });


    var userId = (await UserManager.GetUserAsync(User)).Id;
    var userCowries = await _payment.GetUserCowries(userId);
    var ratetype = await _Rate.RatingType();

}

<input type='hidden' name='userId' value='@UserManager.GetUserId(User)' id='userId' />

@section Css
    {

    <style>
        .page-template-t-tags-php .entry {
            -moz-column-count: 1;
            -webkit-column-count: 1;
            column-count: 1;
        }

        @@media screen and (min-width: 860px) {
            .entry {
                -moz-column-count: 1;
                -webkit-column-count: 1;
                column-count: 1;
                -moz-column-gap: 50px;
                -webkit-column-gap: 50px;
                column-gap: 50px;
                -moz-column-rule: 1px dashed #eee;
                -webkit-column-rule: 1px dashed #eee;
                column-rule: 1px dashed #eee;
            }
        }
    </style>

}

<div id="content">
    <div id="main">

        <div class="post-13 post type-post status-publish format-standard has-post-thumbnail hentry category-stories tag-another-tag-example tag-book tag-classic tag-england tag-fiction tag-non-fiction tag-novel tag-poetry tag-printed-word tag-short-story tag-tag-example tag-true-story tag-yet-another">

            @*<div id="featuredImage">
                    <img src="~/novelist/files/2011/08/sherlock2.png" class="attachment-post size-post wp-post-image" alt="" srcset="http://themes.themolitor.com/wpnovelist/files/2011/08/sherlock2.png 340w, http://themes.themolitor.com/wpnovelist/files/2011/08/sherlock2-150x150.png 150w, http://themes.themolitor.com/wpnovelist/files/2011/08/sherlock2-300x300.png 300w" sizes="(max-width: 340px) 100vw, 340px" />
                </div>*@

            <h2 class="posttitle">@ViewBag.Title </h2>
            <div class="postInfo">@ViewBag.Description</div>

            <div id="entryContainer">
                <div class="entry">
                    @*@Html.Raw(Model.Content)*@
                    <p>
                        @if (Model.Any())
                        {
                            foreach (var i in Model)
                            {
                                <img src="@i.ImageUrl">

                            }
                        }

                    </p>
                    <p class="postinate">
                        @if (Model.HasPreviousPage)
                        {
                            <a data-href="@Url.Action("ReadComic", new {id=thisPage.ComicId, page= previousPage })" class="btn wizard-btn-prev btn-outline-warning  gotoChapter" style="cursor: pointer">Previous</a> <span>|</span>
                        }
                        @if (Model.HasNextPage)
                        {
                            <a data-href="@Url.Action("ReadComic", new {id=thisPage.ComicId, page = nextPage})" class="btn wizard-btn-next btn-outline-warning gotoChapter" style="cursor: pointer">Next </a>
                        }

                        @if (Model.IsLastPage)
                        {
                            <button id="btn-rate" type="button" class="btn  btn-outline-warning" style="cursor: pointer"><i class="fa fa-star-o text-warning"></i><i class="fa fa-star-half-o text-warning"></i> Rate</button>
                        }
                        @*Pages:
                            <span>1</span>
                            <a href="#"><span>2</span></a>
                            <a href="#"><span>3</span></a>*@

                    </p>
                </div><!--end entry-->
                <a style="cursor: pointer" class="report-link" id="reportNovelLink">report content</a>
            </div>


            <!--IF COMMENTS ARE OPEN-->
            <div id="commentToggle">
                <a>~&nbsp;&nbsp; Thoughts? &nbsp;&nbsp;~</a>
            </div>
            <div id="commentsection">
                <div id="toggleComments">
                    <!--IF THERE ARE COMMENTS-->
                    <div id="respond">

                        <h3>Leave a Reply</h3>
                        <div class="cancel-comment-reply">
                            <small><a rel="nofollow" id="cancel-comment-reply-link" href="index.html#respond" style="display:none;">Click here to cancel reply.</a></small>
                        </div>
                        <!--IF USER MUST BE LOGGED IN-->
                        <div action="#" method="post" id="commentform">
                            <!--IF USER IS LOGGED IN-->
                            <p>
                                <textarea name="comment" id="comment" cols="100%" rows="5" tabindex="4"></textarea>
                            </p>
                            <p>
                                <input name="submit" type="submit" id="submitComment" tabindex="5" value="Submit Comment" />
                                <input type='hidden' name='userId' value='@UserManager.GetUserId(User)' id='userId' />

                            </p>

                        </div>
                    </div><!--end respond-->
                    <ol class="commentlist">

                        @{
                            var comments = await _ComicComment.List(Model.FirstOrDefault().ComicId);
                        }
                        @foreach (var i in comments)
                        {
                            var img = "http://1.gravatar.com/avatar/7e1aa1c6c61d2a7dc589c0aef313facc?s=32&amp;d=mm&amp;r=g";
                            if (i.User.ProfileImage != null)
                            {
                                img = i.User.ProfileImage;
                            }


                            <li class="comment even thread-even depth-1" id="comment-15678">
                                <div id="div-comment-15678" class="comment-body">
                                    <div class="comment-author vcard">
                                        <img alt="" src="@img" class="avatar avatar-32 photo" height="32" width="32">	<cite class="fn">
                                            <a href="http://dds" rel="external nofollow" class="url">@i.User.FirstName , @i.User.LastName</a>
                                        </cite> <span class="says">says:</span>
                                    </div>

                                    <div class="comment-meta commentmetadata">
                                        <a href="#">
                                            @{
                                                var date = i.DateCreated;
                                                var date2 = DateTime.Now;
                                                if (date != null)
                                                {
                                                    date2 = Convert.ToDateTime(date);
                                                };
                                                ;
                                            }

                                            @date2.ToString("F")

                                        </a>
                                    </div>

                                    <p>@i.Comment</p>

                                    <div class="reply">
                                        @*<a rel="nofollow" class="comment-reply-link" href="http://themes.themolitor.com/wpnovelist/2011/09/01/romeo-juliet/?replytocom=15678#respond" aria-label="Reply to Donprecious">Reply</a>*@
                                    </div>
                                </div>
                            </li>
                        }
                        <!-- #comment-## -->
                    </ol>

                </div><!--end toggleComments-->
            </div>

        </div><!--end post-->

    </div><!--end main-->
    <div class="clear"></div>

    @if (Model.HasNextPage)
    {
        <a class="gotoChapter" data-href="@Url.Action("ReadComic", new {id=thisPage.ComicId, page=nextPage })" rel="prev"></a>
    }
    @if (Model.HasPreviousPage)
    {
        <a data-href="@Url.Action("ReadComic", new {id=thisPage.ComicId, page= previousPage })" class="gotoChapter" rel="next"></a>
    }


</div><!--end content-->
<!-- Modal -->
<div class="modal fade" id="lockedModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle">Notification</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">

                <h3>Unlock content</h3>
                <h5 class="text-center" style="display: inline-block"> <img src="~/images/cowries.png" width="30" class="img-fluid" /> @userCowries?.Cowries Cowries Left </h5> <a href="@Url.Action("FundWallet", "Wallet")" class="ml-5"> <i class="fa fa-plus"></i> Add </a>
                <br />
                <p>You will spend <b> @ViewBag.CowriesToSpentOnCurrent  cowries</b> to unlock this content</p>
                <button class="btn btn-rounded btn-primary" id="spendOnCurrent"> Spend @ViewBag.CowriesToSpentOnNext CR </button> <a href="@Url.Action("SubScription", "Wallet")" class=" btn btn-rounded btn-success"> <i class="fa fa-unlock"></i> Unlimited Access </a>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>

            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="activateModal" tabindex="-1" role="dialog" aria-labelledby="" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="#">Notification</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h3 class="text-center" style="display: inline-block"> <img src="~/images/cowries.png" width="30" class="img-fluid" />  @userCowries?.Cowries Cowries Left </h3>    <a href="@Url.Action("FundWallet","Wallet")" class="ml-5"> <i class="fa fa-plus"></i> Add </a>
                <br />
                <p>You will spend <b> @ViewBag.CowriesToSpentOnNext cowries</b> to view this content</p>
                <button class="btn btn-rounded btn-primary" id="btnSpend" data-cost="@ViewBag.CowriesToSpentOnNext"> Spend @ViewBag.CowriesToSpentOnNext CR </button>     <button class="btn btn-rounded btn-default"> Cancel </button>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>

            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="rateModal" tabindex="-1" role="dialog" aria-labelledby="" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="#">Rate This Content</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Rate this content</p>
                @{
                    var hasRated = await _Rate.HasUserRatedNovel(thisPage.ComicId, userId);
                    var hasRatedClass = "hide";
                    if (hasRated)
                    {
                        hasRatedClass = "hide";
                    }

                }

                @*<div class="prev-rate @hasRatedClass">
                    <button class="btn btn-xs btn-warning"><i class="fa fa-edit"></i> Edit </button>
                    <p>Previous rate Content Goes here </p>
                </div>*@
                <div class="rate-here ">
                    @foreach (var i in ratetype)
                    {
                        <div class="row border-bottom">
                            <div class="col-sm-6"> <b>@i.Name</b></div>
                            <div class="col-sm-6">
                                <div id="rate-ctrl_@i.Id" data-id="@i.Id" class="text-warning font-medium rate-ctrl" style="font-size: 1.8em"></div>
                            </div>
                        </div>
                    }
                        <div class="form-group">
                            <label>What do you think?</label>
                            <label style="color:red" id="rate-text-error"></label>
                            <textarea class="form-control" id="rateBox"> </textarea>

                        </div>
                    <button class="btn btn-xs btn-warning" id="btn-submitRate"><i class="fa fa-edit"></i>Submit Rate</button>
                </div>


            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>

            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="reportModel" tabindex="-1" role="dialog" aria-labelledby="" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="#">Report content</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @*<p>Rate this content</p>*@

                <div class="">
                    <div class="form-group">
                        <label> Tell us whats wrong with this content</label>
                        <textarea class="form-control" id="reportBox"> </textarea>
                    </div>
                    <button class="btn btn-xs btn-warning" id="btn-submitReport"><i class="fa fa-edit"></i>Submit Report</button>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@foreach (var i in Model)
{
    <input type="hidden" class="epicIds" value="@i.Id" />
}
@section Scripts
    {

    <script src="~/lib/signalr/dist/browser/signalr.min.js"></script>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js" integrity="sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy" crossorigin="anonymous"></script>
    <script type='text/javascript' src='~/asset/rating/rater.min.js'></script>
    <script>
        var connection = new signalR.HubConnectionBuilder()
            .withUrl("/comicCommentHub")
            .configureLogging(signalR.LogLevel.Information)
            .build();
        //var dataObj = {
        //    "id": 0,
        //    "chapterId": 0,
        //    "userId": null,
        //    "comment": null
        //};
        connection.on("commentReceived",
            function(data) {
                var img = "http://1.gravatar.com/avatar/7e1aa1c6c61d2a7dc589c0aef313facc?s=32&amp;d=mm&amp;r=g";
                if (data.user.profileImage != null) {
                    img = data.user.profileImage;
                }
                var html = `<li class="comment even thread-even depth-1" id="comment-15678">
                                <div id="div-comment-15678" class="comment-body">
                                    <div class="comment-author vcard">
                                        <img alt="" src="${img}"

                                                     class="avatar avatar-32 photo" height="32" width="32">
                                            <cite class="fn"><a href="#" rel="external nofollow" class="url">${ (data
                    .user.firstName == null )? "": data
                            .user.firstNam}, ${(data.user.lastName == null) ? "" : data.user.lastName}</a></cite>	</div>


                                    <div class="comment-meta commentmetadata"><a href="#">
                                        ${data.dateCreated} </a>		</div>
                                    <p>${data.comment}</p>
                                </div>
                            </li>`;

                $(".commentlist").prepend(html);

            });

        $("#submitComment").click(function(event) {

            @*var chapterCommentVm =  {

                "chapterId": "@Model.Id",
                "userId": $("#userId").val(),
                "comment": $("#comment").val()
            }*@
            var chapterId = @Model.FirstOrDefault().ComicId;
            var message = $("#comment").val();
            var userId = $("#userId").val();
            connection.invoke("SendChapterComment", chapterId, userId, message).then(function() {
                console.log("comment sent");
            }).catch(function(err) {
                console.log(err);
                return console.error(err.toString());

            });
            event.preventDefault();
        });

        connection.start().then(function() {
            console.log("connected");
        }).catch(function(err) {
            console.log(err);
            return console.error(err.toString());
        });;
    </script>

    <script>
        var nextHref = "";
        var hasPaid = '@ViewBag.hasPaid';
        $(function() {
            if (hasPaid == "False") {
                $("#lockedModal").modal();
            } else {}

        });
        function payForContent(cost, chapterId) {
            var id = [];
            for(var i of $(".epicIds")) {
                id.push($(i).val());
            }
            return $.ajax("/Novel/PayforEpisodes/",
                {
                    type: "post",
                    data: { episodeIds : id}

                });
        }
        $(".gotoChapter").click(function() {
            nextHref = $(this).attr("data-href");
            if (hasPaid == "False") {
                $("#activateModal").modal();
            } else {
                location.href = nextHref;
            }


            //$.featherlight($("#mylightbox"));
        });
        $("#btnSpend").click(function() {

            var cost = $(this).attr("data-cost");
            var spend = payForContent(cost, @chapterId);
            $(this).attr("disabled");
            spend.done(function(data) {
                if (data.status == 200) {
                    Swal.fire(
                        'Notification',
                        data.message,
                        'success'
                    );
                    location.href = nextHref;
                } else {
                    Swal.fire(
                        'Notification',
                        data.message,
                        'warning'
                    );
                }
                $(this).removeAttr("disabled");
            });
        });
        $("#spendOnCurrent").click(function () {
            $(this).attr("disabled");
            var cost = "@ViewBag.CowriesToSpentOnCurrent";
            var spend = payForContent(cost, @chapterId);
            spend.done(function (data) {
                if (data.status == 200) {
                    Swal.fire(
                        'Notification',
                        data.message,
                        'success'
                    );
                    location.href = "@currentUrl";
                } else {
                    Swal.fire(
                        'Notification',
                        data.message,
                        'warning'
                    );
                }
                $(this).removeAttr("disabled");
            });

        });


    </script>

    <script>
        $(function() {
            var options = {
                max_value: 5,
                step_size: 0.5,
                initial_value: 0,
                selected_symbol_type: 'utf8_star', // Must be a key from symbols
                cursor: 'default',
                readonly: false,
                change_once: false, // Determines if the rating can only be set once
                additional_data: {} // Additional data to send to the server
            };

            $(".rate-ctrl").rate(options);

            $("#btn-rate").click(function() {
                $("#rateModal").modal();
            });
            $("#btn-submitRate").click(function() {
                var description = $("#rateBox").val(); 
                if (description == '') {
                    //Swal.fire({
                    //    icon: "error",
                    //    message: "Description cannot be empty"
                    //});
                    $("#rate-text-error").text("Description cannot be empty");
                    $("#rateBox").css("border","1px solid red");
                    return;
                }
                $(".rate-here").find(".rate-ctrl");
                var rateCtrl = $(".rate-here").find(".rate-ctrl");
                var rate = [];
                for(var i of rateCtrl) {
                    console.log(i);
                    rate.push(
                        {
                            "comicId": "@thisPage.ComicId",
                            "ratingTypeId": $(i).attr("data-id"),
                            "userId": "@userId",
                            "value": $(i).rate("getValue"),
                            "description": null
                        }
                    );
                }
               
                $.ajax("/Comic/SaveRating/",
                    {
                        type: "post",
                        data: {
                            rating: rate,
                            description: description
                        },
                        beforeSend: function() {
                            $(this).attr('disabled');
                        },
                        complete: function() {
                            $(this).removeAttr('disabled');
                        },
                        success: function(data) {
                            //success reached
                            $("#rateModal").modal('hide');
                            if (data.status == 200) {
                                Swal.fire(
                                    'Notification',
                                    data.message,
                                    'success'
                                );
                                $("#rate-text-error").text("");
                            } else {
                                Swal.fire(
                                    'Notification',
                                    data.message,
                                    'warning'
                                );
                            }

                        }
                    });

            });
        });


    </script>

    <script>
        $("#reportNovelLink").click(function() {
            $("#reportModel").modal();
        });
        $("#btn-submitReport").click(function() {
            var content = $("#reportBox").val();
            if (content == '' || content == undefined) {
                $("#reportBox").css({ "border": "2px solid red" });
                return;
            }
            var data ={

                "comicId": @thisPage.ComicId,
                "userId": "@userId",
                "message": content
            }
            $.ajax("/Comic/ReportNovel/",
                {
                    type: "post",
                    data: {
                        report: data
                    },
                    beforeSend: function() {
                        $(this).attr('disabled');
                    },
                    complete: function() {
                        $(this).removeAttr('disabled');
                    },
                    success: function(data) {
                        //success reached
                        $("#reportModel").modal('hide');
                        if (data.status == 200) {
                            Swal.fire(
                                'Notification',
                                data.message,
                                'success'
                            );
                        } else {
                            Swal.fire(
                                'Notification',
                                data.message,
                                'warning'
                            );
                        }

                    }
                });

        });
    </script>
}

