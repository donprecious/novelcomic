// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using Webnovel.Data;

namespace Webnovel.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Webnovel.Entities.Animation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AuthorId");

                    b.Property<int>("CategoryId");

                    b.Property<string>("CoverPageImageUrl");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Description");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Animations");
                });

            modelBuilder.Entity("Webnovel.Entities.AnimationComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AnimationId");

                    b.Property<string>("Comment")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AnimationId");

                    b.HasIndex("UserId");

                    b.ToTable("AnimationComments");
                });

            modelBuilder.Entity("Webnovel.Entities.AnimationEpisode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AnimationId");

                    b.Property<string>("Title");

                    b.Property<string>("VideoUrl");

                    b.HasKey("Id");

                    b.HasIndex("AnimationId");

                    b.ToTable("AnimationEpisodes");
                });

            modelBuilder.Entity("Webnovel.Entities.AnimationLibrary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AnimationEpisodeId");

                    b.Property<int>("AnimationId");

                    b.Property<int>("LastViewedId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AnimationEpisodeId");

                    b.HasIndex("AnimationId");

                    b.HasIndex("UserId");

                    b.ToTable("AnimationLibraries");
                });

            modelBuilder.Entity("Webnovel.Entities.AnimationRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AnimationId");

                    b.Property<string>("UserId");

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.HasIndex("AnimationId");

                    b.HasIndex("UserId");

                    b.ToTable("AnimationRatings");
                });

            modelBuilder.Entity("Webnovel.Entities.AnimationReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AnimationId");

                    b.Property<string>("Message");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AnimationId");

                    b.HasIndex("UserId");

                    b.ToTable("AnimationReports");
                });

            modelBuilder.Entity("Webnovel.Entities.AnimationSaved", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AnimationId");

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AnimationId");

                    b.HasIndex("UserId");

                    b.ToTable("AnimationSaveds");
                });

            modelBuilder.Entity("Webnovel.Entities.AnimationTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AnimationId");

                    b.Property<int>("TagId");

                    b.HasKey("Id");

                    b.HasIndex("AnimationId");

                    b.HasIndex("TagId");

                    b.ToTable("AnimationTags");
                });

            modelBuilder.Entity("Webnovel.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("Webnovel.Entities.AuthorEarning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AmountEarnedUsd");

                    b.Property<DateTime>("DateTime");

                    b.Property<int>("PaidChapterHistoryId");

                    b.HasKey("Id");

                    b.HasIndex("PaidChapterHistoryId");

                    b.ToTable("AuthorEarnings");
                });

            modelBuilder.Entity("Webnovel.Entities.AuthorIncome", b =>
                {
                    b.Property<int>("AuthorId");

                    b.Property<double>("AmountUsd");

                    b.HasKey("AuthorId");

                    b.ToTable("AuthorIncomes");
                });

            modelBuilder.Entity("Webnovel.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Webnovel.Entities.Chapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content")
                        .HasColumnType("varchar(MAX)");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DatePublished");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int>("NovelId");

                    b.Property<int>("NovelSectionId");

                    b.Property<string>("TimeZone");

                    b.Property<bool>("isPublished");

                    b.Property<string>("status");

                    b.HasKey("Id");

                    b.HasIndex("NovelId");

                    b.HasIndex("NovelSectionId");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("Webnovel.Entities.ChapterComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ChapterId");

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("DateTime");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.HasIndex("UserId");

                    b.ToTable("ChapterComments");
                });

            modelBuilder.Entity("Webnovel.Entities.ChapterCommentReply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ChapterCommentId");

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("DateTime");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChapterCommentId");

                    b.HasIndex("UserId");

                    b.ToTable("ChapterCommentReplies");
                });

            modelBuilder.Entity("Webnovel.Entities.Comic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AudienceAge");

                    b.Property<int>("AuthorId");

                    b.Property<int>("CategoryId");

                    b.Property<string>("CoverPageImageUrl");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Description");

                    b.Property<string>("Language");

                    b.Property<string>("LeadingGender");

                    b.Property<string>("Title");

                    b.Property<string>("WariningNotice");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Comics");
                });

            modelBuilder.Entity("Webnovel.Entities.ComicComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ComicId");

                    b.Property<string>("Comment")
                        .IsRequired();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ComicId");

                    b.HasIndex("UserId");

                    b.ToTable("ComicComments");
                });

            modelBuilder.Entity("Webnovel.Entities.ComicHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ComicId");

                    b.Property<DateTime>("DateAdded");

                    b.Property<int>("EpisodeId");

                    b.Property<DateTime>("LastOpened");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ComicId");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("UserId");

                    b.ToTable("ComicHistory");
                });

            modelBuilder.Entity("Webnovel.Entities.ComicLibrary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ComicId");

                    b.Property<int>("EpisodeId");

                    b.Property<int>("LastViewedId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ComicId");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("UserId");

                    b.ToTable("ComicLibraries");
                });

            modelBuilder.Entity("Webnovel.Entities.ComicRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ComicId");

                    b.Property<string>("UserId");

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ComicId");

                    b.HasIndex("UserId");

                    b.ToTable("ComicRatings");
                });

            modelBuilder.Entity("Webnovel.Entities.ComicReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ComicId");

                    b.Property<string>("Message");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ComicId");

                    b.HasIndex("UserId");

                    b.ToTable("ComicReports");
                });

            modelBuilder.Entity("Webnovel.Entities.ComicSaved", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ComicId");

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ComicId");

                    b.HasIndex("UserId");

                    b.ToTable("ComicSaveds");
                });

            modelBuilder.Entity("Webnovel.Entities.ComicScene", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ComicId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("ComicId");

                    b.ToTable("ComicScenes");
                });

            modelBuilder.Entity("Webnovel.Entities.ComicTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ComicId");

                    b.Property<int>("TagId");

                    b.HasKey("Id");

                    b.HasIndex("ComicId");

                    b.HasIndex("TagId");

                    b.ToTable("ComicTags");
                });

            modelBuilder.Entity("Webnovel.Entities.ComicViewer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BrowserAgent");

                    b.Property<int>("ComicId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("IpAddress");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ComicId");

                    b.ToTable("ComicViewer");
                });

            modelBuilder.Entity("Webnovel.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("alpha2Code");

                    b.Property<string>("alpha3Code");

                    b.Property<string>("capital");

                    b.Property<string>("demonym");

                    b.Property<string>("name");

                    b.Property<string>("nativeName");

                    b.Property<string>("numericCode");

                    b.Property<int>("population");

                    b.Property<string>("region");

                    b.Property<string>("subregion");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Webnovel.Entities.Episode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ComicId");

                    b.Property<int>("ComicSceneId");

                    b.Property<string>("Content")
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("Description");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Name");

                    b.Property<int>("Preference");

                    b.HasKey("Id");

                    b.HasIndex("ComicId");

                    b.HasIndex("ComicSceneId");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("Webnovel.Entities.FundHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AmountUsd");

                    b.Property<string>("PaymentGateWay");

                    b.Property<string>("ReferenceNumber");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FundHistories");
                });

            modelBuilder.Entity("Webnovel.Entities.Novel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AudienceAge");

                    b.Property<int>("AuthorId");

                    b.Property<int>("CategoryId");

                    b.Property<string>("CoverPageImageUrl");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Language");

                    b.Property<string>("LeadingGender");

                    b.Property<string>("Name");

                    b.Property<string>("Status");

                    b.Property<string>("Title");

                    b.Property<string>("WariningNotice");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Novels");
                });

            modelBuilder.Entity("Webnovel.Entities.NovelChapterHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ChapterId");

                    b.Property<DateTime>("DateAdded");

                    b.Property<DateTime>("LastOpened");

                    b.Property<int>("NovelId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.HasIndex("NovelId");

                    b.HasIndex("UserId");

                    b.ToTable("NovelChapterHistories");
                });

            modelBuilder.Entity("Webnovel.Entities.NovelComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment")
                        .IsRequired();

                    b.Property<DateTime?>("DateTime");

                    b.Property<int>("NovelId");

                    b.Property<int>("RateId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NovelId");

                    b.HasIndex("RateId");

                    b.HasIndex("UserId");

                    b.ToTable("NovelComments");
                });

            modelBuilder.Entity("Webnovel.Entities.NovelLibrary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("NovelId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NovelId");

                    b.HasIndex("UserId");

                    b.ToTable("NovelLibraries");
                });

            modelBuilder.Entity("Webnovel.Entities.NovelRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("NovelId");

                    b.Property<int>("RatingTypeId");

                    b.Property<string>("UserId");

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.HasIndex("NovelId");

                    b.HasIndex("RatingTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("NovelRatings");
                });

            modelBuilder.Entity("Webnovel.Entities.NovelReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Message");

                    b.Property<int>("NovelId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NovelId");

                    b.HasIndex("UserId");

                    b.ToTable("NovelReports");
                });

            modelBuilder.Entity("Webnovel.Entities.NovelSaved", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTime");

                    b.Property<int>("NovelId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NovelId");

                    b.HasIndex("UserId");

                    b.ToTable("NovelSaveds");
                });

            modelBuilder.Entity("Webnovel.Entities.NovelSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("NovelId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("NovelId");

                    b.ToTable("NovelSections");
                });

            modelBuilder.Entity("Webnovel.Entities.NovelTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("NovelId");

                    b.Property<int>("TagId");

                    b.HasKey("Id");

                    b.HasIndex("NovelId");

                    b.HasIndex("TagId");

                    b.ToTable("NovelTags");
                });

            modelBuilder.Entity("Webnovel.Entities.NovelViewer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BrowserAgent");

                    b.Property<DateTime>("Date");

                    b.Property<string>("IpAddress");

                    b.Property<int>("NovelId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NovelId");

                    b.ToTable("NovelViewer");
                });

            modelBuilder.Entity("Webnovel.Entities.PaidChapterHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ChapterId");

                    b.Property<double>("CowriesUsed");

                    b.Property<DateTime>("DateTime");

                    b.Property<double>("SpentInUsd");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.HasIndex("UserId");

                    b.ToTable("PaidChapterHistories");
                });

            modelBuilder.Entity("Webnovel.Entities.RatingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("RatingTypes");
                });

            modelBuilder.Entity("Webnovel.Entities.Referral", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdditonalInformation");

                    b.Property<int>("CountryId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("InformationFrom");

                    b.Property<string>("MinimumReferral");

                    b.Property<string>("Occupation");

                    b.Property<string>("ProgramType");

                    b.Property<string>("ShortUrl");

                    b.Property<string>("Status");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("UserId");

                    b.ToTable("Referrals");
                });

            modelBuilder.Entity("Webnovel.Entities.Referred", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<DateTime>("DateRegistered");

                    b.Property<int>("ReferralId");

                    b.HasKey("UserId");

                    b.HasIndex("ReferralId");

                    b.ToTable("Referreds");
                });

            modelBuilder.Entity("Webnovel.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Webnovel.Entities.UserFund", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Cowries");

                    b.Property<string>("UserId1");

                    b.Property<int>("WordsRemaining");

                    b.HasKey("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("UserFunds");
                });

            modelBuilder.Entity("Webnovel.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("ProfileImage");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Webnovel.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Webnovel.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Webnovel.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Webnovel.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Webnovel.Entities.Animation", b =>
                {
                    b.HasOne("Webnovel.Entities.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Webnovel.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Webnovel.Entities.AnimationComment", b =>
                {
                    b.HasOne("Webnovel.Entities.Animation", "Animation")
                        .WithMany()
                        .HasForeignKey("AnimationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Webnovel.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Webnovel.Entities.AnimationEpisode", b =>
                {
                    b.HasOne("Webnovel.Entities.Animation", "Animation")
                        .WithMany("AnimationEpisodes")
                        .HasForeignKey("AnimationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Webnovel.Entities.AnimationLibrary", b =>
                {
                    b.HasOne("Webnovel.Entities.AnimationEpisode", "AnimationEpisode")
                        .WithMany()
                        .HasForeignKey("AnimationEpisodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Webnovel.Entities.Animation", "Animation")
                        .WithMany()
                        .HasForeignKey("AnimationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Webnovel.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Webnovel.Entities.AnimationRating", b =>
                {
                    b.HasOne("Webnovel.Entities.Animation", "Animation")
                        .WithMany("AnimationRatings")
                        .HasForeignKey("AnimationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Webnovel.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Webnovel.Entities.AnimationReport", b =>
                {
                    b.HasOne("Webnovel.Entities.Animation", "Animation")
                        .WithMany()
                        .HasForeignKey("AnimationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Webnovel.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Webnovel.Entities.AnimationSaved", b =>
                {
                    b.HasOne("Webnovel.Entities.Animation", "Animation")
                        .WithMany()
                        .HasForeignKey("AnimationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Webnovel.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Webnovel.Entities.AnimationTag", b =>
                {
                    b.HasOne("Webnovel.Entities.Animation", "Animation")
                        .WithMany()
                        .HasForeignKey("AnimationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Webnovel.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Webnovel.Entities.Author", b =>
                {
                    b.HasOne("Webnovel.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Webnovel.Entities.AuthorEarning", b =>
                {
                    b.HasOne("Webnovel.Entities.PaidChapterHistory", "PaidChapterHistory")
                        .WithMany()
                        .HasForeignKey("PaidChapterHistoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Webnovel.Entities.AuthorIncome", b =>
                {
                    b.HasOne("Webnovel.Entities.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Webnovel.Entities.Chapter", b =>
                {
                    b.HasOne("Webnovel.Entities.Novel", "Novel")
                        .WithMany("Chapters")
                        .HasForeignKey("NovelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Webnovel.Entities.NovelSection", "NovelSection")
                        .WithMany("Chapters")
                        .HasForeignKey("NovelSectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Webnovel.Entities.ChapterComment", b =>
                {
                    b.HasOne("Webnovel.Entities.Chapter", "Chapter")
                        .WithMany("ChapterComments")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Webnovel.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Webnovel.Entities.ChapterCommentReply", b =>
                {
                    b.HasOne("Webnovel.Entities.ChapterComment", "ChapterComment")
                        .WithMany("ChapterCommentReplies")
                        .HasForeignKey("ChapterCommentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Webnovel.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Webnovel.Entities.Comic", b =>
                {
                    b.HasOne("Webnovel.Entities.Author", "Author")
                        .WithMany("Comics")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Webnovel.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Webnovel.Entities.ComicComment", b =>
                {
                    b.HasOne("Webnovel.Entities.Comic", "Comic")
                        .WithMany()
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Webnovel.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Webnovel.Entities.ComicHistory", b =>
                {
                    b.HasOne("Webnovel.Entities.Comic", "Comic")
                        .WithMany()
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Webnovel.Entities.Episode", "Episode")
                        .WithMany()
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Webnovel.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Webnovel.Entities.ComicLibrary", b =>
                {
                    b.HasOne("Webnovel.Entities.Comic", "Comic")
                        .WithMany()
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Webnovel.Entities.Episode", "Episode")
                        .WithMany()
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Webnovel.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Webnovel.Entities.ComicRating", b =>
                {
                    b.HasOne("Webnovel.Entities.Comic", "Comic")
                        .WithMany("ComicRatings")
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Webnovel.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Webnovel.Entities.ComicReport", b =>
                {
                    b.HasOne("Webnovel.Entities.Comic", "Comic")
                        .WithMany()
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Webnovel.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Webnovel.Entities.ComicSaved", b =>
                {
                    b.HasOne("Webnovel.Entities.Comic", "Comic")
                        .WithMany()
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Webnovel.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Webnovel.Entities.ComicScene", b =>
                {
                    b.HasOne("Webnovel.Entities.Comic", "Comic")
                        .WithMany("ComicScenes")
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Webnovel.Entities.ComicTag", b =>
                {
                    b.HasOne("Webnovel.Entities.Comic", "Comic")
                        .WithMany("Tags")
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Webnovel.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Webnovel.Entities.ComicViewer", b =>
                {
                    b.HasOne("Webnovel.Entities.Comic", "Comic")
                        .WithMany()
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Webnovel.Entities.Episode", b =>
                {
                    b.HasOne("Webnovel.Entities.Comic", "Comic")
                        .WithMany("Episodes")
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Webnovel.Entities.ComicScene", "ComicScene")
                        .WithMany("Episodes")
                        .HasForeignKey("ComicSceneId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Webnovel.Entities.FundHistory", b =>
                {
                    b.HasOne("Webnovel.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Webnovel.Entities.Novel", b =>
                {
                    b.HasOne("Webnovel.Entities.Author", "Author")
                        .WithMany("Novels")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Webnovel.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Webnovel.Entities.NovelChapterHistory", b =>
                {
                    b.HasOne("Webnovel.Entities.Chapter", "Chapter")
                        .WithMany()
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Webnovel.Entities.Novel", "Novel")
                        .WithMany()
                        .HasForeignKey("NovelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Webnovel.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Webnovel.Entities.NovelComment", b =>
                {
                    b.HasOne("Webnovel.Entities.Novel", "Novel")
                        .WithMany()
                        .HasForeignKey("NovelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Webnovel.Entities.NovelRating", "NovelRating")
                        .WithMany()
                        .HasForeignKey("RateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Webnovel.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Webnovel.Entities.NovelLibrary", b =>
                {
                    b.HasOne("Webnovel.Entities.Novel", "Novel")
                        .WithMany()
                        .HasForeignKey("NovelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Webnovel.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Webnovel.Entities.NovelRating", b =>
                {
                    b.HasOne("Webnovel.Entities.Novel", "Novel")
                        .WithMany("NovelRatings")
                        .HasForeignKey("NovelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Webnovel.Entities.RatingType", "RatingType")
                        .WithMany()
                        .HasForeignKey("RatingTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Webnovel.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Webnovel.Entities.NovelReport", b =>
                {
                    b.HasOne("Webnovel.Entities.Novel", "Novel")
                        .WithMany()
                        .HasForeignKey("NovelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Webnovel.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Webnovel.Entities.NovelSaved", b =>
                {
                    b.HasOne("Webnovel.Entities.Novel", "Novel")
                        .WithMany()
                        .HasForeignKey("NovelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Webnovel.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Webnovel.Entities.NovelSection", b =>
                {
                    b.HasOne("Webnovel.Entities.Novel", "Novel")
                        .WithMany("NovelSections")
                        .HasForeignKey("NovelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Webnovel.Entities.NovelTag", b =>
                {
                    b.HasOne("Webnovel.Entities.Novel", "Novel")
                        .WithMany("Tags")
                        .HasForeignKey("NovelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Webnovel.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Webnovel.Entities.NovelViewer", b =>
                {
                    b.HasOne("Webnovel.Entities.Novel", "Novel")
                        .WithMany()
                        .HasForeignKey("NovelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Webnovel.Entities.PaidChapterHistory", b =>
                {
                    b.HasOne("Webnovel.Entities.Chapter", "Chapter")
                        .WithMany()
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Webnovel.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Webnovel.Entities.Referral", b =>
                {
                    b.HasOne("Webnovel.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Webnovel.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Webnovel.Entities.Referred", b =>
                {
                    b.HasOne("Webnovel.Entities.Referral", "Referral")
                        .WithMany("referreds")
                        .HasForeignKey("ReferralId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Webnovel.Models.ApplicationUser", "User")
                        .WithOne("Referred")
                        .HasForeignKey("Webnovel.Entities.Referred", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Webnovel.Entities.UserFund", b =>
                {
                    b.HasOne("Webnovel.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");
                });
#pragma warning restore 612, 618
        }
    }
}
